// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	Channel(ctx context.Context, opts ...grpc.CallOption) (AppService_ChannelClient, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (AppService_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AppService_serviceDesc.Streams[0], "/api.proc.AppService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &appServiceChannelClient{stream}
	return x, nil
}

type AppService_ChannelClient interface {
	Send(*AppChannelReq) error
	Recv() (*AppChannelRes, error)
	grpc.ClientStream
}

type appServiceChannelClient struct {
	grpc.ClientStream
}

func (x *appServiceChannelClient) Send(m *AppChannelReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appServiceChannelClient) Recv() (*AppChannelRes, error) {
	m := new(AppChannelRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	Channel(AppService_ChannelServer) error
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (*UnimplementedAppServiceServer) Channel(AppService_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (*UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

func RegisterAppServiceServer(s *grpc.Server, srv AppServiceServer) {
	s.RegisterService(&_AppService_serviceDesc, srv)
}

func _AppService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppServiceServer).Channel(&appServiceChannelServer{stream})
}

type AppService_ChannelServer interface {
	Send(*AppChannelRes) error
	Recv() (*AppChannelReq, error)
	grpc.ServerStream
}

type appServiceChannelServer struct {
	grpc.ServerStream
}

func (x *appServiceChannelServer) Send(m *AppChannelRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appServiceChannelServer) Recv() (*AppChannelReq, error) {
	m := new(AppChannelReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.proc.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _AppService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "app.proto",
}
